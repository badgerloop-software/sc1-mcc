#!/bin/bash
VERSION=mbed-os-6.15.1-latest
MBED_OS_IMAGE=ghcr.io/armmbed/mbed-os-env:${VERSION}
CONTAINER_HOSTNAME=bloop-dev
PROD_IMAGE_NAME=bloop-mbed
DEV_IMAGE_NAME=bloop-dev-$(git rev-parse --short=7 HEAD)
DOCKER_BUILD_ARGS="--build-arg UID=$(id -u) --build-arg GID=$(id -g)"
REGISTRY_DOMAIN=ghcr.io
REGISTRY_ORG=badgerloop-software
UPSTREAM_IMAGE=${REGISTRY_DOMAIN}/${REGISTRY_ORG}/${PROD_IMAGE_NAME}:latest

# HW Stuff
NUCLEO_MOUNTPOINT=/mnt/nucleo

# Help with clean prints
alias echo='{ set +x; } 2> /dev/null; builtin echo'

function build_image {
    if [[ $# -ge 1  && $1 == "prod" ]]; then
        echo "Building PROD scoped image"
        BUILD_NAME=${REGISTRY_DOMAIN}/${REGISTRY_ORG}/${PROD_IMAGE_NAME}
    else
        echo "Building dev scoped image"
        BUILD_NAME=${DEV_IMAGE_NAME}
    fi
    docker build -t ${BUILD_NAME} ${DOCKER_BUILD_ARGS} .
}

function dev_image_exits {
    return docker image inspect ${DEV_IMAGE_NAME}
}

function mount_nucleo {
    echo "Mounting Nucleo"
    echo "Requiring sudo access... enter sudo password"
    sudo mkdir ${NUCLEO_MOUNTPOINT}
}


echo "  ____  _                     _____             "
echo " |  _ \| |                   |  __ \            "
echo " | |_) | | ___   ___  _ __   | |  | | _____   __"
echo " |  _ <| |/ _ \ / _ \| '_ \  | |  | |/ _ \ \ / /"
echo " | |_) | | (_) | (_) | |_) | | |__| |  __/\ V / "
echo " |____/|_|\___/ \___/| .__/  |_____/ \___| \_/  "
echo "                     | |                        "
echo "                     |_|                        "
echo "Run $0 -h to print help"

if [[ -z $(command -v docker) ]]; then
    echo "======================================================================"
    echo "ERROR: Docker not installed"
    echo "Install Docker first"
    echo "WSL: https://learn.microsoft.com/en-us/windows/wsl/tutorials/wsl-containers"
    echo "Linux: https://docs.docker.com/engine/install/ubuntu/"
    echo "Mac: https://docs.docker.com/desktop/install/mac-install/"
    echo "======================================================================"
    exit 1
fi

if [[ 


if [[ $1 == "dev" ]]
then
    if [[ $2 == "build" ]]
    then
        build_image
    else
        if [[ ! dev_image_exists ]]; then
            echo "====================================================="
            echo "ERROR: Dev image does not exist locally"
            echo "Run $0 setup-dev or $0 dev build to build local image"
            echo "====================================================="
            exit 1
        fi
    fi
    TARGET_IMAGE=${DEV_IMAGE_NAME}
elif [[ $1 == "setup-dev" ]]
then
    build_image
    echo "Image setup sucessfully, run \"$0 dev\" to build local image"
    exit 0
elif [[ $1 == "publish" ]]; then
    echo "Unless you are an admin with a package write token already registered, this command \
    is not for you..."
    echo "Don't worry, if this was a mistake, nothing bad will happen"
    echo "Simply press ctrl+c to exit the prompt"
    build_image prod
    if ! docker login ghcr.io ; then
        echo "=================================================================================================="
        echo "ERROR: Failed to login to registry"
        echo "Make sure your PAT is correct and authorized by a GitHub admin"
        echo "If you are not a GitHub admin but are supposed to push, contact a GitHub Admin to approve your PAT"
        echo "=================================================================================================="
        exit 1
    fi
    docker push ghcr.io/${REGISTRY_ORG}/${PROD_IMAGE_NAME}:latest
    exit 0
elif [[ $1 == "-h" ]]; then
    echo "Badgerloop MBed Development Platform"
    echo "$0 <no_args>          # Loads production image and launches terminal"
    echo "$0 [setup-dev]        # Builds development image for local docker development"
    echo "$0 [dev | dev build]  # Loads development image and launches terminal"
    echo "$0 [publish]          # Publishes local dev image to the ghcr for production use [admin credentials required]"
    exit 0
else
    TARGET_IMAGE=${UPSTREAM_IMAGE}
    docker pull ${TARGET_IMAGE}
fi

echo "Targeting Image ${TARGET_IMAGE}"

docker run -it --rm --privileged -v /dev:/dev -v /run/udev:/run/udev:ro -v $(pwd):/src -h ${CONTAINER_HOSTNAME} ${TARGET_IMAGE}

